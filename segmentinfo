#!/usr/bin/env bash

function error() {
	(>&2 echo $@)
}

NUM_REGEX='^[0-9]+$'
function ensure_number() {
	if ! [[ "$1" =~ $NUM_REGEX ]]; then
		error "$2 must be a number"
		usage
	fi
}

ADAPTER_REGEX='^[0-9]+\.[0-9]+$'
function ensure_adapter() {
	if ! [[ "$1" =~ $ADAPTER_REGEX ]]; then
		error "$1 is not a valid adapter specification, must be <adapterid>.<frontendid>"
		usage
	fi
}

function usage() {
	error "$0 [-a <adapter>] [-s <number of samples>] [-n] [frequency ...]"
	exit 1
}

function find_free_adapter() {
	for adapter in "${adapters[@]}"; do
		segmentpid=${adapter_alloc[$adapter]}
		if ! ps --pid "$segmentpid" &> /dev/null; then
			echo "$adapter"
			return 0
		fi
	done
	return 1
}

frequencies=()
adapters=()
declare -gA adapter_alloc
declare -gA adapter_opts
samples=100000
noinit=""

while getopts "a:f:s:n" opt; do
	case $opt in
		a) ensure_adapter "$OPTARG"; adapters+=($OPTARG); adapter_alloc[$OPTARG]=0; adapter_opts[$OPTARG]="";;
		s) ensure_number "$OPTARG" samples; samples=$OPTARG;;
		n) noinit=noinit;;
		*) usage;;
	esac
done

for i in `seq $OPTIND $#`; do
	freq="${!i}"
	ensure_number "$freq" frequency
	frequencies+=($freq)
done

for freq in "${frequencies[@]}"; do
	while true; do
		adapter=$(find_free_adapter)
		if [[ $? -eq 0 ]]; then
			data=(${adapter//./ })
			segmentinfo_freq -a ${data[0]} -f ${data[1]} -s $samples ${adapter_opts[$adapter]} $freq &
			adapter_alloc[$adapter]=$!
			if [[ -n "$noinit" ]]; then
				adapter_opts[$adapter]="-n"
			fi
			break
		fi
		sleep 1
	done
done

for adapter in "${!adapter_alloc[@]}"; do
	while true; do
		if ! ps --pid ${adapter_alloc[$adapter]} &> /dev/null; then
			break
		fi
		sleep 1
	done
done
