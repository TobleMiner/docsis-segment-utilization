#!/usr/bin/env bash

FRONTENDS="-a 0.1"
FREQUENCIES="546000000 554000000 562000000 570000000 578000000 586000000 594000000 602000000 666000000 674000000 682000000 690000000 698000000 706000000 714000000 722000000 762000000 770000000 778000000 786000000 794000000 802000000 810000000 818000000"
SAMPLES="-t 10"

DATAFILE=/tmp/segmentdata.log
DATAFILE_PART="$DATAFILE".part

BC_PREFIX="scale=10;"

function round() {
	printf "%.0f" "$(bc <<< "$BC_PREFIX $1 - 0.5")"
}

function color() {
	local S=1
	local V=1
	local count=$1
	local index=$2
	local angle="$(bc -lq <<< "$BC_PREFIX 360 / $count * $index")"
	local segment=$(round "$(bc -lq <<< "$BC_PREFIX $angle / 60")")
	local f="$(bc -lq <<< "$BC_PREFIX $angle / 60 - $segment")"
	local p="$(bc -lq <<< "$BC_PREFIX $V * (1 - $S)")"
	local q="$(bc -lq <<< "$BC_PREFIX $V * (1 - $S * $f)")"
	local t="$(bc -lq <<< "$BC_PREFIX $V * (1 - $S * (1 - $f))")"
	local red; local green; local blue;
	case $segment in
		-0) :;&
		[06]) red=$V; green=$t; blue=$p;;
		1) red=$q; green=$V; blue=$p;;
		2) red=$p; green=$V; blue=$t;;
		3) red=$p; green=$q; blue=$V;;
		4) red=$t; green=$p; blue=$V;;
		5) red=$V; green=$p; blue=$q;;
	esac
	red=$(round "$(bc -lq <<< "$BC_PREFIX $red * 255")")
	green=$(round "$(bc -lq <<< "$BC_PREFIX $green * 255")")
	blue=$(round "$(bc -lq <<< "$BC_PREFIX $blue * 255")")
	printf "%02x%02x%02x" $red $green $blue
}

function update() {
	segmentinfo $FRONTENDS $SAMPLES $FREQUENCIES > "$DATAFILE_PART"
	mv "$DATAFILE_PART" "$DATAFILE"
}

function config() {
	local freqs=($FREQUENCIES)
	local num_freq=${#freqs[@]}
cat <<EOF
graph_title KD Segmentauslastung DOCSIS Kiel-Wik
graph_args --base 1000 -l 0 -u $((num_freq * 50000000)) -X 6
graph_vlabel Bit/s
graph_info Anzeige der Auslastung der Downstream Kanaele KD in Kiel-Wik
graph_category docsis
sum.label Summe
sum.draw LINE1
sum.colour 000000
sum.cdef sum,1000,*
EOF

	local i=0
	for freq in $FREQUENCIES; do
		freq=$(($freq / 1000000))
		color=`color $num_freq $i`
		echo "f$freq.label $freq MHz"
		if [[ $i -eq 0 ]]; then
			echo "f$freq.draw AREA"
		else
			echo "f$freq.draw STACK"
		fi
		echo "f$freq.colour $color"
		echo "f$freq.cdef f$freq,1000,*"
		i=$((i + 1))
	done
}

function fetch() {
	local sum=0
	while read line; do
		data=(${line//:/ })
		freq=$((${data[0]} / 1000000))
		kbits=${data[1]}
		echo "f$freq.value $kbits"
		if [[ -n "$kbits" ]]; then
			sum="$(bc -lq <<< "$BC_PREFIX $sum + $kbits")"
		fi
	done < "$DATAFILE"
	echo "sum.value $sum"
}

case $1 in
	config) config;;
	update) update;;
	*) fetch;;
esac
